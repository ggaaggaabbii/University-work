     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 <res 0000001E>              nume_fisier resb 30
    18 0000001E <res 0000001E>              cuv resb 30
    19 0000003C 00000000                    descriptor dd 0
    20 00000040 7700                        mod_deschidere db "w", 0
    21 00000042 257300                      format_citire db "%s", 0
    22 00000045 25730A0D00                  format_scriere db "%s", 10, 13, 0
    23                                      
    24                                      
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 68[00000000]                    push nume_fisier
    31 00000005 68[42000000]                    push format_citire
    32 0000000A FF15[00000000]                  call [scanf]
    33 00000010 83C408                          add esp, 4 * 2
    34                                          
    35 00000013 68[40000000]                    push mod_deschidere
    36 00000018 68[00000000]                    push nume_fisier
    37 0000001D FF15[00000000]                  call [fopen]
    38 00000023 A3[3C000000]                    mov [descriptor], eax
    39 00000028 83C408                          add esp, 4 * 2
    40                                          
    41                                          citire:
    42 0000002B 803D[1E000000]24                    cmp byte [cuv], '$'
    43 00000032 7437                                je final
    44                                              
    45 00000034 68[1E000000]                        push cuv
    46 00000039 68[42000000]                        push format_citire
    47 0000003E FF15[00000000]                      call [scanf]
    48 00000044 83C408                              add esp, 4 * 2
    49                                              
    50 00000047 803D[1E000000]24                    cmp byte [cuv], '$'
    51 0000004E 741B                                je final
    52                                              
    53 00000050 68[1E000000]                        push cuv
    54 00000055 68[45000000]                        push format_scriere
    55 0000005A FF35[3C000000]                      push dword [descriptor]
    56 00000060 FF15[00000000]                      call [fprintf]
    57 00000066 83C40C                              add esp, 4 * 3
    58                                              
    59 00000069 EBC0                                jmp citire
    60                                          
    61                                          
    62                                          ; exit(0)
    63                                          final:
    64 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
