     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fscanf, printf, fopen               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fscanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 00000000                    character dd 0
    19 00000004 <res 0000001E>              numefisier resb 30
    20 00000022 00000000                    descriptor dd 0
    21 00000026 257300                      formatcitire db "%s", 0
    22 00000029 7200                        moddesc db "r", 0
    23 0000002B 256300                      formatcitire2 db "%c", 0
    24 0000002E 313335373900                impare db "13579", 0
    25 00000034 00000000                    contor dd 0
    26 00000038 25640A0D00                  formatscriere db "%d", 10, 13, 0
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32 00000000 68[04000000]                    push numefisier
    33 00000005 68[26000000]                    push formatcitire
    34 0000000A FF15[00000000]                  call [scanf]
    35 00000010 83C408                          add esp, 4 * 2
    36                                          
    37 00000013 68[29000000]                    push moddesc
    38 00000018 68[04000000]                    push numefisier
    39 0000001D FF15[00000000]                  call [fopen]
    40 00000023 A3[22000000]                    mov [descriptor], eax
    41 00000028 83C408                          add esp, 4 * 2
    42                                          
    43                                          citire:
    44 0000002B 83F8FF                              cmp eax, -1
    45 0000002E 7E42                                jle final
    46                                              
    47 00000030 68[00000000]                        push character
    48 00000035 68[2B000000]                        push formatcitire2
    49 0000003A FF35[22000000]                      push dword [descriptor]
    50 00000040 FF15[00000000]                      call [fscanf]
    51                                              
    52 00000046 E802000000                          call isimpar
    53                                              
    54 0000004B EBDE                                jmp citire
    55                                      
    56                                          ; exit(0)
    57                                          
    58                                          isimpar:
    59 0000004D B900000000                          mov ecx, 0
    60                                              l:
    61 00000052 83F905                                cmp ecx, 5
    62 00000055 741A                                  je fin
    63                                                
    64 00000057 8A99[2E000000]                        mov bl, [impare + ecx]
    65 0000005D 3A1D[00000000]                        cmp bl, [character]
    66 00000063 7403                                  je increment
    67                                                
    68                                                
    69 00000065 41                                    inc ecx
    70 00000066 EBEA                                  jmp l
    71                                                
    72                                                increment:
    73 00000068 41                                      inc ecx
    74 00000069 FF05[34000000]                          inc dword [contor]
    75 0000006F EBE1                                    jmp l
    76                                               
    77                                              fin:
    78 00000071 C3                                      ret
    79                                          
    80                                          
    81                                          final:
    82 00000072 FF35[34000000]                  push dword [contor]
    83 00000078 68[38000000]                    push formatscriere
    84 0000007D FF15[00000000]                  call [printf]
    85 00000083 83C408                          add esp, 4 * 2
    86                                          
    87                                          
    88 00000086 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 00000088 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
