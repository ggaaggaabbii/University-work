     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      
    19 00000000 <res 0000001E>              sir1 resb 30
    20 0000001E <res 0000001E>              sir2 resb 30
    21 0000003C <res 0000003C>              sir3 resb 60
    22 00000078 <res 0000001E>              nume resb 30
    23 00000096 7700                        modd db "w", 0
    24 00000098 257300                      format db "%s", 0
    25 0000009B 256300                      format2 db "%c", 0
    26 0000009E 00000000                    contor dd 0
    27 000000A2 00000000                    descriptor dd 0
    28                                      
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34 00000000 68[00000000]                    push sir1
    35 00000005 68[98000000]                    push format
    36 0000000A FF15[00000000]                  call [scanf]
    37 00000010 83C408                          add esp, 4 * 2
    38                                          
    39 00000013 68[1E000000]                    push sir2
    40 00000018 68[98000000]                    push format
    41 0000001D FF15[00000000]                  call [scanf]
    42 00000023 83C408                          add esp, 4 * 2
    43                                          
    44 00000026 68[78000000]                    push nume
    45 0000002B 68[98000000]                    push format
    46 00000030 FF15[00000000]                  call [scanf]
    47 00000036 83C408                          add esp, 4 * 2
    48                                          
    49 00000039 68[96000000]                    push modd
    50 0000003E 68[78000000]                    push nume
    51 00000043 FF15[00000000]                  call [fopen]
    52 00000049 A3[A2000000]                    mov [descriptor], eax
    53 0000004E 83C408                          add esp, 4 * 2
    54                                          
    55 00000051 BB[00000000]                    mov ebx, sir1
    56 00000056 B9[1E000000]                    mov ecx, sir2
    57                                          
    58                                          
    59                                          scriere:
    60 0000005B 803B00                              cmp byte [ebx], 0
    61 0000005E 743C                                je finsir1
    62                                              
    63 00000060 803900                              cmp byte [ecx], 0
    64 00000063 7453                                je finsir2
    65                                              
    66 00000065 E802000000                          call comp
    67                                              
    68 0000006A EBEF                                jmp scriere
    69                                              
    70                                          
    71                                          comp:
    72 0000006C 8A01                                mov al, [ecx]
    73                                              
    74 0000006E 3A03                                cmp al, [ebx]
    75 00000070 7714                                ja s2
    76 00000072 FF05[9E000000]                      inc dword [contor]
    77 00000078 8B15[9E000000]                      mov edx, [contor]
    78                                              
    79 0000007E 8882[3C000000]                      mov [sir3 + edx], al
    80 00000084 41                                  inc ecx
    81                                              
    82 00000085 C3                                  ret
    83                                              
    84                                              s2:
    85 00000086 8A03                                  mov al, [ebx]
    86 00000088 FF05[9E000000]                        inc dword [contor]
    87 0000008E 8B15[9E000000]                        mov edx, [contor]
    88                                                  
    89 00000094 8882[3C000000]                        mov [sir3 + edx], al
    90 0000009A 43                                    inc ebx
    91 0000009B C3                                    ret
    92                                             
    93                                          finsir1:
    94 0000009C 803900                              cmp byte [ecx], 0
    95 0000009F 7433                                je final
    96                                              
    97 000000A1 FF05[9E000000]                      inc dword [contor]
    98 000000A7 8A01                                mov al, [ecx]
    99 000000A9 8B15[9E000000]                      mov edx, [contor]
   100 000000AF 8882[3C000000]                      mov [edx + sir3], al
   101 000000B5 41                                  inc ecx
   102 000000B6 EBE4                                jmp finsir1
   103                                              
   104                                          finsir2:
   105 000000B8 803B00                              cmp byte [ebx], 0
   106 000000BB 7417                                je final
   107                                              
   108 000000BD FF05[9E000000]                      inc dword [contor]
   109 000000C3 8A03                                mov al, [ebx]
   110 000000C5 8B15[9E000000]                      mov edx, [contor]
   111 000000CB 8882[3C000000]                      mov [edx + sir3], al
   112 000000D1 43                                  inc ebx
   113 000000D2 EBE4                                jmp finsir2
   114                                          
   115                                          
   116                                          final:
   117 000000D4 8B0D[9E000000]                      mov ecx, [contor]
   118                                              
   119                                              afis:
   120 000000DA 51                                      push ecx
   121                                                  
   122 000000DB FFB1[3C000000]                          push dword [sir3 + ecx]
   123 000000E1 68[9B000000]                            push format2
   124 000000E6 FF35[A2000000]                          push dword [descriptor]
   125 000000EC FF15[00000000]                          call [fprintf]
   126 000000F2 83C40C                                  add esp, 4 * 3
   127                                                  
   128 000000F5 59                                      pop ecx
   129 000000F6 E2E2                                    loop afis
   130                                                  
   131 000000F8 FF35[A2000000]                  push dword [descriptor]
   132 000000FE FF15[00000000]                  call [fclose]
   133 00000104 83C404                          add esp, 4 * 1
   134                                          ; exit(0)
   135 00000107 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   136 00000109 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
